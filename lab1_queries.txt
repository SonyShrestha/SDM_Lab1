// QUERY 1
// Match papers that are cited and are published in a conference
MATCH (citingPaper:paper)-[:CITES]->(citedPaper:paper)-[:PUBLISHED_IN]->(conference:conference)
WITH citedPaper, conference, COUNT(citingPaper) AS citations
ORDER BY conference.name, citations DESC
// Group the results by conference and collect cited papers and their citations
WITH conference, COLLECT({paper: citedPaper, citationCount: citations}) AS citedPapers
// For each conference, return the top 3 most cited papers
RETURN conference.name AS Conference, [paperInfo IN citedPapers[0..3] | paperInfo.paper.title] AS TopCitedPapers


// QUERY 2
// Find authors who have published in at least 2 different editions of a conference
MATCH (author:author)<-[:WRITTEN_BY]-(paper:paper)-[pub:PUBLISHED_IN]->(conference:conference)
// Collect distinct editions of each conference for each author
WITH conference, author, COLLECT(DISTINCT pub.edition) AS editions
// Filter authors who have published in 4 or more editions (Make it 1 or 2 for now)
WHERE SIZE(editions) >= 4
// Return the conference name and the names of these authors as the community
RETURN conference.name AS Conference, COLLECT(author.name) AS CommunityAuthors


// QUERY 3
// Match all journals and calculate the previous two years from the current date
MATCH (journal:journal)
WITH journal.name AS JournalName, date().year - 1 AS PreviousYear, date().year - 2 AS YearBeforePrevious
// Optionally match papers published in the journal in the previous year
OPTIONAL MATCH (paperRecent:paper)-[:PUBLISHED_IN {year: PreviousYear}]->(journal)
// Optionally match papers published in the journal in the year before the previous year
OPTIONAL MATCH (paperOlder:paper)-[:PUBLISHED_IN {year: YearBeforePrevious}]->(journal)
// Combine the lists of recent and older papers into a single collection for each journal
WITH JournalName, COLLECT(paperRecent) + COLLECT(paperOlder) AS PapersInLastTwoYears
// Unwind the combined list to process each paper individually
UNWIND PapersInLastTwoYears AS EachPaper
// For each paper, optionally match other papers that cite it
WITH JournalName, EachPaper
OPTIONAL MATCH (citingPaper:paper)-[:CITES]->(EachPaper)
// Count the citations for each paper and aggregate the total citations for all papers
WITH JournalName, EachPaper, COUNT(citingPaper) AS CitationsForEachPaper
WITH JournalName, SUM(CitationsForEachPaper) AS TotalCitations, COUNT(EachPaper) AS TotalPapers
// Calculate the impact factor for each journal by dividing the total citations by the total number of papers
RETURN JournalName, TotalCitations / TotalPapers AS ImpactFactor
// Order the results by impact factor in descending order
ORDER BY ImpactFactor DESC


// QUERY 4
// Match all papers written by each author
MATCH (a:author)<-[:WRITTEN_BY]-(p:paper)
// For each paper, find all other papers that cite it
OPTIONAL MATCH (p)<-[:CITES]-(citingPaper:paper)
// Count the citations for each paper, grouping by author and paper
WITH a, p, COUNT(citingPaper) AS citations
// Order the results by author name and citation count in descending order
ORDER BY a.name, citations DESC
// Collect the citation counts for each author into a list
WITH a, COLLECT(citations) AS citationCounts
// Generate a range of indices from 1 to the length of the citationCounts list
WITH a, citationCounts, RANGE(1, SIZE(citationCounts)) AS indices
// Unwind the indices to process each one individually
UNWIND indices AS idx
// Prepare data for h-index calculation by keeping author name, index, and citation counts
WITH a.name AS authorName, idx AS h, citationCounts
// Filter for indices where the citation count at that index is greater than or equal to the index
WHERE citationCounts[idx-1] >= idx
// Return the author name and the maximum value of 'h' that meets the condition, which is the h-index
RETURN authorName, MAX(h) AS hIndex
// Order the results by h-index in descending order to show the authors with the highest h-index first
ORDER BY hIndex DESC


// Discussion
MATCH (a:author)
RETURN COUNT(DISTINCT a.authorId) AS DistinctAuthorIds

MATCH (a:author)
RETURN COUNT(DISTINCT a.name) AS DistinctAuthorIds



